{"version":3,"sources":["components/weatherApp.js","App.js","serviceWorker.js","index.js"],"names":["DateIco","icon","WindIco","Humidity","WeatherApp","state","temperatureMetric","long","lat","timestamp","apikey","msg","this","getData","navigator","geolocation","getCurrentPosition","position","api","coords","longitude","latitude","fetch","then","res","json","data","console","log","currently","apparentTemperature","humidity","summary","temperature","time","windSpeed","setState","timezone","replace","toUpperCase","isNaN","Math","round","Date","toLocaleDateString","weekday","year","month","day","convertedTemperature","changeTempFarenCelcius","date","getFormattedDate","date2","className","color","setIcons","autoplay","height","width","Component","library","add","fab","faCheckSquare","faCoffee","faCalendarDay","faWind","faTint","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.99cec636.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport Skycons from \"react-skycons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nexport const DateIco = () => <FontAwesomeIcon icon=\"calendar-day\" />;\r\nexport const WindIco = () => <FontAwesomeIcon icon=\"wind\" />;\r\nexport const Humidity = () => <FontAwesomeIcon icon=\"tint\" />;\r\n\r\n// \"https://api.darksky.net/forecast/\" + apikey + \"/37.8267,-122.4233\";\r\n\r\nclass WeatherApp extends Component {\r\n  state = {\r\n    temperatureMetric: \"celcius\",\r\n    long: \"\",\r\n    lat: \"\",\r\n    timestamp: \"\",\r\n    apikey: \"8fcd54fe78bab4aaa7f8de732e8e9b78\",\r\n    msg: \"\"\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getData();\r\n  }\r\n\r\n  getData() {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(position => {\r\n        const proxy = \"https://cors-anywhere.herokuapp.com/\";\r\n        const api = `${proxy}https://api.darksky.net/forecast/${this.state.apikey}/${position.coords.longitude},${position.coords.latitude}`;\r\n\r\n        fetch(api)\r\n          .then(res => {\r\n            return res.json();\r\n          })\r\n          .then(data => {\r\n            console.log(data);\r\n\r\n            const {\r\n              apparentTemperature,\r\n              humidity,\r\n              icon,\r\n              summary,\r\n              temperature,\r\n              time,\r\n              windSpeed\r\n            } = data.currently;\r\n\r\n            this.setState({\r\n              timezone: data.timezone,\r\n              long: position.coords.longitude,\r\n              lat: position.coords.latitude,\r\n              timestamp: position.timestamp,\r\n              apparentTemperature: apparentTemperature,\r\n              humidity: humidity,\r\n              icon: icon,\r\n              summary: summary,\r\n              temperature: temperature,\r\n              time: time,\r\n              windSpeed: windSpeed\r\n            });\r\n          });\r\n      });\r\n    } else {\r\n      this.setState({\r\n        msg: \"Sorry, your browser do not support geolocation\"\r\n      });\r\n    }\r\n  }\r\n\r\n  setIcons(icon) {\r\n    // CLEAR_DAY;\r\n    // CLEAR_NIGHT;\r\n    // PARTLY_CLOUDY_DAY;\r\n    // PARTLY_CLOUDY_NIGHT;\r\n    // CLOUDY;\r\n    // RAIN;\r\n    // SLEET;\r\n    // SNOW;\r\n    // WIND;\r\n    // FOG;\r\n    if (!icon) return \"\";\r\n    return icon.replace(/-/g, \"_\").toUpperCase();\r\n  }\r\n\r\n  changeTempFarenCelcius(temperature) {\r\n    if (isNaN(temperature)) return 0;\r\n    let metric = \"unknown\";\r\n\r\n    if (this.state.temperatureMetric === \"celcius\") {\r\n      metric = Math.round((5 / 9) * (temperature - 32)) + \" °C\";\r\n    } else {\r\n      metric = Math.round((temperature * 9) / 5 + 32) + \" °F\";\r\n    }\r\n    return metric;\r\n  }\r\n\r\n  getFormattedDate(timestamp) {\r\n    if (timestamp) {\r\n      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString\r\n      var options = {\r\n        weekday: \"long\",\r\n        year: \"numeric\",\r\n        month: \"long\",\r\n        day: \"numeric\"\r\n      };\r\n      const date = new Date(timestamp);\r\n      return date.toLocaleDateString(\"en-GB\", options);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      timezone,\r\n      timestamp,\r\n      msg,\r\n      temperature,\r\n      apparentTemperature,\r\n      humidity,\r\n      icon,\r\n      summary,\r\n      time,\r\n      windSpeed\r\n    } = this.state;\r\n\r\n    const convertedTemperature = this.changeTempFarenCelcius(temperature);\r\n    const date = this.getFormattedDate(timestamp);\r\n    const date2 = this.getFormattedDate(time);\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"App container-fluid\">\r\n          <div className=\"row align-items-center\">\r\n            <div className=\"col-3\">\r\n              <div className=\"square\">\r\n                <div className=\"content\">\r\n                  {icon && (\r\n                    <Skycons\r\n                      color=\"white\"\r\n                      icon={this.setIcons(icon)}\r\n                      autoplay={true}\r\n                      height=\"200\"\r\n                      width=\"200\"\r\n                    />\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <h7> {convertedTemperature}</h7>\r\n            </div>\r\n\r\n            <div className=\"col-5\">\r\n              <div className=\"container\">\r\n                <div className=\"row\">\r\n                  <h1> {timezone}</h1>\r\n                </div>\r\n\r\n                <div className=\"row\">\r\n                  <h5> {summary}</h5>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"container-fluid pt-4\">\r\n            <div className=\"row\">\r\n              <div className=\"col-1\">\r\n                <DateIco />\r\n              </div>\r\n              <div className=\"col-10\"> {date}</div>\r\n            </div>\r\n            <div className=\"row\">\r\n              <div className=\"col-1\">\r\n                <WindIco />\r\n              </div>\r\n              <div className=\"col-10\"> {windSpeed}</div>\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n              <div className=\"col-1\">\r\n                <Humidity />\r\n              </div>\r\n              <div className=\"col\"> {humidity}</div>\r\n            </div>\r\n\r\n            <div className=\"row\">{msg}</div>\r\n            <div className=\"row\">{apparentTemperature}</div>\r\n            <div className=\"row\">{date2}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WeatherApp;\r\n","import React, { Component } from \"react\";\r\n\r\nimport \"./App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nimport WeatherApp from \"./components/weatherApp\";\r\n\r\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\r\nimport { fab } from \"@fortawesome/free-brands-svg-icons\";\r\nimport {\r\n  faCheckSquare,\r\n  faCoffee,\r\n  faCalendarDay,\r\n  faWind,\r\n  faTint\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nlibrary.add(fab, faCheckSquare, faCoffee, faCalendarDay, faWind, faTint);\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <WeatherApp />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n  \r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}